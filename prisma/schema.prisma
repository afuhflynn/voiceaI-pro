generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  conversations  Conversation[]
  tickets       Ticket[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Conversation {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime       @default(now())
  messages      Message[]
  workflowState WorkflowState?
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         Sender // ENUM: CLIENT or AGENT
  content        String
  timestamp      DateTime     @default(now())
}

enum Sender {
  CLIENT
  AGENT
}

model WorkflowState {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @unique
  currentStep    String
  metadata       Json
}

model Lead {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  score       Int           @default(0)
  status      String // e.g., QUALIFIED, UNQUALIFIED
  createdAt   DateTime      @default(now())
  Appointment Appointment[]
}

model Appointment {
  id           String   @id @default(cuid())
  lead         Lead     @relation(fields: [leadId], references: [id])
  leadId       String
  scheduledFor DateTime
  status       String // e.g., SCHEDULED, COMPLETED, CANCELED
  notes        String?
}

model Ticket {
  id          String   @id @default(cuid())
  subject     String
  description String
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String
  status      String // e.g., OPEN, PENDING, RESOLVED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
